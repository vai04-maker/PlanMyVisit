{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  executeJwtAuthenticationService(username, password) {\n    return axios.post('http://localhost:8191/authenticate', {\n      username,\n      password\n    });\n  }\n\n  registerSuccessfulLogin(username, password) {\n    console.log('registerSuccessfulLogin');\n    sessionStorage.setItem('authenticatedUser', username);\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setUpAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n  setUpAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/vaibhav/personal_projects/to-do/frontend/todo-app/src/components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","executeJwtAuthenticationService","username","password","post","registerSuccessfulLogin","console","log","sessionStorage","setItem","registerSuccessfulLoginForJwt","token","setUpAxiosInterceptors","createJWTToken","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA2B;AAEvBC,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAoB;AAC/C,WAAOJ,KAAK,CAACK,IAAN,CAAW,oCAAX,EAAgD;AACnDF,MAAAA,QADmD;AAEnDC,MAAAA;AAFmD,KAAhD,CAAP;AAIH;;AAEDE,EAAAA,uBAAuB,CAACH,QAAD,EAAUC,QAAV,EAAmB;AACtCG,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA2CP,QAA3C;AACH;;AAEDQ,EAAAA,6BAA6B,CAACR,QAAD,EAAWS,KAAX,EAAiB;AAC1CH,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CP,QAA5C;AACA,SAAKU,sBAAL,CAA4B,KAAKC,cAAL,CAAoBF,KAApB,CAA5B;AACH;;AAEDE,EAAAA,cAAc,CAACF,KAAD,EAAO;AACjB,WAAO,YAAWA,KAAlB;AACH;;AAEDG,EAAAA,MAAM,GAAE;AACJN,IAAAA,cAAc,CAACO,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAE;AACZ,QAAIC,IAAI,GAACT,cAAc,CAACU,OAAf,CAAuB,mBAAvB,CAAT;AACA,QAAGD,IAAI,KAAG,IAAV,EAAgB,OAAO,KAAP;AAChB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAE;AACjB,QAAIF,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAG,IAAV,EAAgB,OAAO,EAAP;AAChB,WAAOA,IAAP;AACH;;AAEDL,EAAAA,sBAAsB,CAACD,KAAD,EAAO;AACzBZ,IAAAA,KAAK,CAACqB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAG,KAAKP,cAAL,EAAH,EAAyB;AACrBO,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+Bd,KAA/B;AACH;;AACD,aAAOY,MAAP;AACH,KANL;AAQH;;AAhDsB;;AAmD3B,eAAe,IAAIvB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\nclass AuthenticationService{\n\n    executeJwtAuthenticationService(username, password){\n        return axios.post('http://localhost:8191/authenticate',{\n            username, \n            password\n        })\n    }\n\n    registerSuccessfulLogin(username,password){\n        console.log('registerSuccessfulLogin')\n        sessionStorage.setItem('authenticatedUser',username);\n    }\n\n    registerSuccessfulLoginForJwt(username, token){\n        sessionStorage.setItem('authenticatedUser', username)\n        this.setUpAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token){\n        return 'Bearer '+ token\n    }\n\n    logout(){\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    isUserLoggedIn(){\n        let user=sessionStorage.getItem('authenticatedUser')\n        if(user===null) return false;\n        return true;\n    }\n\n    getLoggedInUserName(){\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user===null) return ''\n        return user\n    }\n\n    setUpAxiosInterceptors(token){\n        axios.interceptors.request.use(\n            (config) => {\n                if(this.isUserLoggedIn()){\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}